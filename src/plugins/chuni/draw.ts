import type { Context } from 'koishi';
import { join } from 'node:path';
import { createCanvas, loadImage, type Image } from 'canvas';
import { levelNamesShort, type GameVer } from './utils';
import { getRank } from './utils';
import { type RatingItem, calcRatingAvg } from './utils';

function asset(name: string) {
  return join(__dirname, 'assets', name);
}

export interface RequiredUserData {
  userName: string;
  level: number;
  rating?: number;
  ratingMax?: number;
}

export async function draw(
  chuniData: Context['chuniData'],
  userData: RequiredUserData,
  b30: RatingItem[],
  r10: RatingItem[]
) {
  const resp = await chuniData
    .from('music')
    .select()
    .in(
      'id',
      [b30, r10].flatMap((arr) => arr.map(({ musicId }) => musicId))
    );
  if (resp.error) {
    throw new Error(JSON.stringify(resp.error));
  }
  const musicData = resp.data;

  const loadJaket = (id: number) =>
    loadImage(chuniData.storage.from('jacket').getPublicUrl(`jpg/${id}.jpg`).data.publicUrl);

  const { b30avg, r10avg, rating, ratingAchievable } = calcRatingAvg(b30, r10);

  const ranks = Object.fromEntries(
    await Promise.all(
      ['SSS+', 'SSS', 'SS+', 'SS', 'S+', 'S', 'AAA', 'AA', 'A', 'BBB', 'BB', 'B', 'C', 'D'].map(
        async (rank): Promise<[string, Image]> => [rank, await loadImage(asset(`ranks/${rank}.png`))]
      )
    )
  );
  const aj = await loadImage(asset('ALLJUSTICE.png'));
  const fc = await loadImage(asset('FULLCOMBO.png'));

  const canvas = createCanvas(1470, 1450);
  const ctx = canvas.getContext('2d');
  const fontname = '"Noto Sans CJK JP Medium"';

  ctx.textBaseline = 'alphabetic';
  ctx.lineWidth = 1;

  // bg
  ctx.drawImage(await loadImage(asset('base.png')), 0, 0);

  // user info
  ctx.font = '24px ' + fontname;
  ctx.fillText(`${userData.level}`, 202, 65 + 18);
  ctx.fillText(
    `${(userData.rating ?? rating).toFixed(2)} ${
      userData.ratingMax ? `(Max ${userData.ratingMax.toFixed(2)})` : ''
    } (< ${ratingAchievable.toFixed(2)})`,
    241,
    106 + 22
  );

  ctx.font = '41px ' + fontname;
  ctx.fillText(userData.userName, 246, 47 + 38);

  // b30 & r10
  ctx.font = 'bold 32px ' + fontname;
  ctx.fillStyle = '#ffffff';
  ctx.fillText(b30avg.toFixed(2), 158, 204 + 25);
  ctx.fillText(r10avg.toFixed(2), 158, 1070 + 25);
  ctx.fillStyle = '#000000';

  const xs = [45, 324, 606, 884, 1164];
  const colors = ['#00a883', '#ec7500', '#de2526', '#8e1ae6', '#150000'];

  const drawItem = async (e: RatingItem, i: number, bx: number, by: number) => {
    if (e.diff === 5) return;

    const music = musicData.find(({ id }) => id === e.musicId);
    if (!music) {
      console.log(e.musicId, e.diff);
      return;
    }
    const lvl = e.levelBase.toFixed(1);
    const ra = e.rating.toFixed(2);
    const rank = getRank(e.score);

    ctx.drawImage(await loadJaket(e.musicId), bx, by, 105, 105);

    ctx.font = '14px ' + fontname;
    ctx.textAlign = 'center';
    ctx.fillText(music.title, bx + 110 + 148 / 2, by + 6 + 14, 148);
    ctx.textAlign = 'left';

    ctx.beginPath();
    ctx.moveTo(bx + 114, by + 28);
    ctx.lineTo(bx + 114 + 142, by + 28);
    ctx.stroke();

    ctx.font = '28px ' + fontname;
    ctx.fillText(e.score.toString().padStart(7, ' '), bx + 130, by + 33 + 23);

    ctx.fillStyle = colors[e.diff];
    ctx.fillRect(bx + 115, by + 64, 140, 20);
    ctx.fillStyle = '#000000';
    ctx.strokeStyle = '#ffffff';
    ctx.strokeRect(bx + 114, by + 63, 142, 22);
    ctx.strokeStyle = '#000000';

    ctx.font = '16px ' + fontname;
    ctx.fillStyle = '#ffffff';
    ctx.fillText(`${levelNamesShort[e.diff]}${lvl} â†’ ${ra}`, bx + 121, by + 67 + 13);
    ctx.fillStyle = '#000000';

    ctx.drawImage(ranks[rank], bx + 115, by + 90, 58, 11);
    if (e.aj || e.fc) ctx.drawImage(e.aj ? aj : fc, bx + 176, by + 90, 58, 11);

    ctx.font = '12px ' + fontname;
    ctx.fillText(`#${i + 1}`, bx + 237, by + 91 + 10);
  };

  await Promise.all([
    ...b30.map((e, i) => {
      const l = Math.floor(i / 5),
        c = i % 5;
      const bx = xs[c],
        by = 252 + 132 * l;

      return drawItem(e, i, bx, by);
    }),
    ...r10.map((e, i) => {
      const l = Math.floor(i / 5),
        c = i % 5;
      const bx = xs[c],
        by = 1120 + 132 * l;

      return drawItem(e, i, bx, by);
    }),
  ]);

  // footer
  ctx.font = '24px ' + fontname;
  ctx.fillStyle = '#ffffff';
  ctx.fillText('Generated By SiGNAL Bot / Designed by eastown / Supported by Asakura Mizu', 32, 1406 + 27);
  ctx.fillStyle = '#000000';

  return canvas.toDataURL();
}
